import json 

class Bdd:
    def __init__(self,fichier):
        with open(fichier,"r") as fd:
            self.data=json.load(fd)
            self.vars=self.data[0].keys()
            
    def ajouter(self,vin):
        self.data.append(vin)
        
    def retirer(self,indice) :
        del self.data[indice]
                
    def afficher_lignes(self,liste_indices):
        print("|"+"obs  "+"|",end='')
        for cle in self.vars:
            if len(cle +"  ")<7:
                print (cle + "   |",end='')
            else :
                print (cle + " |",end='')
        for i in liste_indices:
            print('')
            print('|'+str(i+1)+' '*(5-len(str(i+1)))+'|',end='')
            for cle in self.vars:
                if len(cle +"  ")<7:
                    if type(self.data[i][cle])==float:
                        print (str(round(self.data[i][cle],3)) +' '*((len(cle)+3)-len(str(round(self.data[i][cle],3) )))+'|',end='')
                    else:
                        print (str(self.data[i][cle]) +' '*((len(cle)+3)-len(str(self.data[i][cle]) ))+'|',end='')
                else :
                    if type(self.data[i][cle])==float:
                        print (str(round(self.data[i][cle],3)) +' '*((len(cle)+1)-len(str(round(self.data[i][cle],3) )))+'|',end='')
                    else :
                        print (str(self.data[i][cle]) +' '*((len(cle)+1)-len(str(self.data[i][cle]) ))+'|',end='')
            
    def __str__(self):
        self.afficher_lignes([i for i in range(len(self.data))])
        
            
donnees=Bdd("vinData.json")

vars=['citric acid','wine identity','residual sugar','quality','total sulfur dioxide','volatile acidity',
 'pH','type','alcohol','density','fixed acidity','chlorides','sulphates','free sulfur dioxide']

class Contrainte:
    def __init__(self,var,signe,valeur):
        self.var=var                            #Compris entre 0 et 13
        self.signe=signe                        #0 : inférieur   1 : égale   2 : supérieur 
        self.valeur=valeur

    def __str__(self):
        if self.signe==0:
            return(vars[self.var]+' < '+str(self.valeur))
        if self.signe==1:
            return(vars[self.var]+' = '+str(self.valeur))
        if self.signe==2:
            return(vars[self.var]+' > '+str(self.valeur))
    
c1=Contrainte(6,1,3.51)
